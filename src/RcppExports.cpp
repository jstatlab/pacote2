// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mdc_rcpp
int mdc_rcpp(int& x, int& y);
RcppExport SEXP _pacote2_mdc_rcpp(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(mdc_rcpp(x, y));
    return rcpp_result_gen;
END_RCPP
}
// drayleigh
double drayleigh(double x, double sigma);
RcppExport SEXP _pacote2_drayleigh(SEXP xSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(drayleigh(x, sigma));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP exp_smooth_c(void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_pacote2_mdc_rcpp", (DL_FUNC) &_pacote2_mdc_rcpp, 2},
    {"_pacote2_drayleigh", (DL_FUNC) &_pacote2_drayleigh, 2},
    {"exp_smooth_c", (DL_FUNC) &exp_smooth_c, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_pacote2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
